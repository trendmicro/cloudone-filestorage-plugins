{
 "Parameters": {
  "BucketName": {
   "Type": "String",
   "Description": "Name of a bucket that you want to full scan. Make sure you have FSS Storage Stack deployed around it already."
  },
  "ScannerQueueArn": {
   "Type": "String",
   "Description": "ARN of the ScannerQueue queue. Something like arn:aws:sqs:us-east-1:123456789012:All-in-one-TM-FileStorageSecurity-ScannerStack-IT1V5O-ScannerQueue-1IOQHTGGGZYFL"
  },
  "ScannerQueueUrl": {
   "Type": "String",
   "Description": "URL of the ScannerQueue queue. Something like https://sqs.us-east-1.amazonaws.com/123456789012/All-in-one-TM-FileStorageSecurity-ScannerStack-IT1V5O-ScannerQueue-1IOQHTGGGZYFL"
  },
  "ScanResultTopicArn": {
   "Type": "String",
   "Description": "ARN of ScanResultTopic topic. Something like arn:aws:sns:us-east-1:123456789012:All-in-one-TM-FileStorageSecurity-StorageStack-1E00QCLBZW7M4-ScanResultTopic-1W7RZ7PBZZUJO"
  },
  "Schedule": {
   "Type": "String",
   "Default": "",
   "Description": "Set a schedule for full scan. If empty, there will not be a scheduled scan. Defaults to empty. More info at: https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchevents-expressions.html"
  }
 },
 "Conditions": {
  "SetSchedule": {
   "Fn::Not": [
    {
     "Fn::Equals": [
      "",
      {
       "Ref": "Schedule"
      }
     ]
    }
   ]
  }
 },
 "Resources": {
  "StateBucket": {
   "Type": "AWS::S3::Bucket",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "PaginatorExecutionRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "PaginatorExecutionRoleDefaultPolicy": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:ListBucket",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":s3:::",
          {
           "Ref": "BucketName"
          }
         ]
        ]
       }
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "StateBucket",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "StateBucket",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PaginatorExecutionRoleDefaultPolicy",
    "Roles": [
     {
      "Ref": "PaginatorExecutionRole"
     }
    ]
   }
  },
  "PaginatorFunction": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "const AWS = require('aws-sdk');\nconst s3 = new AWS.S3();\n\nconst STATE_BUCKET = process.env.STATE_BUCKET;\nconst KEY_WITH_KEYS_TO_SCAN ='keys';\n\nexports.lambda_handler = async (event) => {\n  console.log(event);\n  const bucket = event.bucket;\n  const allKeys = await getAllKeys(bucket);\n  const writeResult = await writeToBucket(allKeys, KEY_WITH_KEYS_TO_SCAN, STATE_BUCKET);\n\n  return {\n    bucket: bucket,\n    stateBucket: STATE_BUCKET,\n    stateKey: KEY_WITH_KEYS_TO_SCAN,\n    limit: 500\n  }\n};\n\nconst getKeysInPage = async (bucket, continuationToken) => {\n  const params = {\n    Bucket: bucket,\n    ContinuationToken: continuationToken? continuationToken : null\n  };\n  const response = await s3.listObjectsV2(params).promise();\n  return {\n    keys: response.Contents.map(object => object.Key),\n    nextContinuationToken: response.NextContinuationToken\n  };\n};\n\nconst getAllKeys = async (bucket) => {\n  let {keys, nextContinuationToken} = await getKeysInPage(bucket);\n  while (nextContinuationToken){\n    const result = await getKeysInPage(bucket, nextContinuationToken);\n    console.log(result);\n    keys.push(...result.keys);\n    nextContinuationToken = result.nextContinuationToken? result.nextContinuationToken : null;\n  }\n  return keys;\n};\n\nconst writeToBucket = async (content, key, bucket) => {\n  try {\n    const params = {\n      Bucket: bucket,\n      Key: key,\n      ContentType:'binary',\n      Body: Buffer.from(JSON.stringify(content))\n    };\n    const result = await s3.putObject(params).promise();\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n  "
    },
    "Role": {
     "Fn::GetAtt": [
      "PaginatorExecutionRole",
      "Arn"
     ]
    },
    "Architectures": [
     "arm64"
    ],
    "Environment": {
     "Variables": {
      "STATE_BUCKET": {
       "Ref": "StateBucket"
      }
     }
    },
    "Handler": "index.lambda_handler",
    "MemorySize": 1024,
    "Runtime": "nodejs16.x",
    "Timeout": 900
   },
   "DependsOn": [
    "PaginatorExecutionRoleDefaultPolicy",
    "PaginatorExecutionRole"
   ]
  },
  "FilterExecutionRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "FilterExecutionRoleDefaultPolicy": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "StateBucket",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "StateBucket",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "FilterExecutionRoleDefaultPolicy",
    "Roles": [
     {
      "Ref": "FilterExecutionRole"
     }
    ]
   }
  },
  "FilterFunction": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "const AWS = require('aws-sdk');\nconst s3 = new AWS.S3();\n\nconst fetchKeys = async (bucket, key) => {\n    try {\n        const params = {\n            Bucket: bucket,\n            Key: key\n        };\n        const result = await s3.getObject(params).promise();\n        const keys = JSON.parse(result.Body.toString('utf-8'));\n        return keys;\n    } catch (error) {\n        throw error;\n    }\n};\n\nconst writeToBucket = async (content, key, bucket) => {\n    try {\n      const params = {\n        Bucket: bucket,\n        Key: key,\n        ContentType:'binary',\n        Body: Buffer.from(JSON.stringify(content))\n      };\n      const result = await s3.putObject(params).promise();\n      return result;\n    } catch (error) {\n      return error;\n    }\n};\n\nconst filterKeys = (keys, limit) => {\n    const keysToScan = keys.slice(0, limit);\n    const remainingKeys = keys.slice(limit);\n    return {\n        keysToScan,\n        remainingKeys\n    };\n};\n\nexports.lambda_handler = async (event) => {\n    console.log(event);\n    const stateBucket = event.stateBucket;\n    const stateKey = event.stateKey;\n    const scanLimitPerIteration = event.limit;\n    const bucket = event.bucket;\n    const allKeys = await fetchKeys(stateBucket, stateKey);\n    \n    const filtered = filterKeys(allKeys, scanLimitPerIteration);\n    \n    // Rewrite file in bucket with remaining keys\n    if (filtered.remainingKeys){\n        await writeToBucket(filtered.remainingKeys, stateKey, stateBucket);\n    }\n\n    const response = {\n        keys: filtered.keysToScan,\n        bucket: bucket,\n        limit: scanLimitPerIteration,\n        remainingKeysLength: filtered.remainingKeys? filtered.remainingKeys.length : null,\n        stateBucket: event.stateBucket,\n        stateKey: event.stateKey\n    };\n    \n    return response;\n};\n"
    },
    "Role": {
     "Fn::GetAtt": [
      "FilterExecutionRole",
      "Arn"
     ]
    },
    "Architectures": [
     "arm64"
    ],
    "Environment": {
     "Variables": {
      "BUCKET_NAME": {
       "Ref": "BucketName"
      }
     }
    },
    "Handler": "index.lambda_handler",
    "MemorySize": 512,
    "Runtime": "nodejs16.x",
    "Timeout": 900
   },
   "DependsOn": [
    "FilterExecutionRoleDefaultPolicy",
    "FilterExecutionRole"
   ]
  },
  "ScanOneObjectExecutionRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "ScanOneObjectExecutionRoleDefaultPolicy": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject",
        "s3:PutObjectTagging"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":s3:::",
          {
           "Ref": "BucketName"
          },
          "/*"
         ]
        ]
       }
      },
      {
       "Action": "sqs:SendMessage",
       "Effect": "Allow",
       "Resource": {
        "Ref": "ScannerQueueArn"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ScanOneObjectExecutionRoleDefaultPolicy",
    "Roles": [
     {
      "Ref": "ScanOneObjectExecutionRole"
     }
    ]
   }
  },
  "ScanOneObjectFunction": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "# Copyright (C) 2021 Trend Micro Inc. All rights reserved.\n\nimport json\nimport os\nimport logging\nimport boto3\nimport botocore\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\nimport urllib.parse\nimport uuid\nimport datetime\n\nsqs_url = os.environ['SQSUrl']\nprint('scanner queue URL: ' + sqs_url)\nsqs_region = sqs_url.split('.')[1]\nprint('scanner queue region: ' + sqs_region)\nsqs_endpoint_url = 'https://sqs.{0}.amazonaws.com'.format(sqs_region)\nprint('scanner queue endpoint URL: ' + sqs_endpoint_url)\nreport_object_key = 'True' == os.environ.get('REPORT_OBJECT_KEY', 'False')\nprint(f'report object key: {report_object_key}')\n\nregion = boto3.session.Session().region_name\ns3_client_path = boto3.client('s3', region, config=Config(s3={'addressing_style': 'path'}, signature_version='s3v4'))\ns3_client_virtual = boto3.client('s3', region, config=Config(s3={'addressing_style': 'virtual'}, signature_version='s3v4'))\n\ntry:\n    with open('version.json') as version_file:\n        version = json.load(version_file)\n        print(f'version: {version}')\nexcept Exception as ex:\n    print('failed to get version: ' + str(ex))\n\ndef create_presigned_url(bucket_name, object_name, expiration):\n    \"\"\"Generate a presigned URL to share an S3 object\n\n    :param bucket_name: string\n    :param object_name: string\n    :param expiration: Time in seconds for the presigned URL to remain valid\n    :return: Presigned URL as string. If error, returns None.\n    \"\"\"\n\n    # Generate a presigned URL for the S3 object\n    try:\n        s3_client = s3_client_path if '.' in bucket_name else s3_client_virtual\n        response = s3_client.generate_presigned_url(\n            'get_object',\n            Params={\n                'Bucket': bucket_name,\n                'Key': object_name\n            },\n            ExpiresIn=expiration\n        )\n    except ClientError as e:\n        print('failed to generate pre-signed URL: ' + str(e))\n        return None\n\n    # The response contains the presigned URL which is sensitive data\n    return response\n\n\ndef push_to_sqs(bucket_name, object_name, amz_request_id, presigned_url, event_time):\n    object = {\n        'S3': {\n            'bucket': bucket_name,\n            'object': object_name,\n            'amzRequestID': amz_request_id,\n        },\n        'ScanID': str(uuid.uuid4()),\n        'SNS' : os.environ['SNSArn'],\n        'URL': presigned_url,\n        'ModTime': event_time,\n        'ReportObjectKey': report_object_key\n    }\n    try:\n        session = boto3.session.Session(region_name=sqs_region)\n        sqs = session.resource(service_name='sqs', endpoint_url=sqs_endpoint_url)\n        queue = sqs.Queue(url=sqs_url)\n        response = queue.send_message(MessageBody=json.dumps(object))\n        return response\n    except ClientError as e:\n        print('failed to push SQS message: ' + str(e))\n        return None\n\ndef is_folder(key):\n    return key.endswith('/')\n\ndef handle_step_functions_event(bucket, key):\n    key = urllib.parse.unquote_plus(key)\n    amz_request_id = \"f\"\n    event_time = datetime.datetime.utcnow().isoformat() # ISO-8601 format, 1970-01-01T00:00:00.000Z, when Amazon S3 finished processing the request\n\n    if is_folder(key):\n        print('Skip scanning for folder.')\n        return\n\n    presigned_url = create_presigned_url(\n        bucket,\n        key,\n        expiration = 60 * 60 # in seconds\n    )\n    print(f'AMZ request ID: {amz_request_id}, event time: {event_time}, URL:', presigned_url.split('?')[0])\n    sqs_response = push_to_sqs(bucket, key, amz_request_id, presigned_url, event_time)\n    print(sqs_response)\n\ndef lambda_handler(event, context):\n\n    bucket = event['bucket']\n    key = event['key']\n    handle_step_functions_event(bucket, key)"
    },
    "Role": {
     "Fn::GetAtt": [
      "ScanOneObjectExecutionRole",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "SNSArn": {
       "Ref": "ScanResultTopicArn"
      },
      "SQSUrl": {
       "Ref": "ScannerQueueUrl"
      }
     }
    },
    "Handler": "index.lambda_handler",
    "MemorySize": 128,
    "Runtime": "python3.9",
    "Timeout": 60
   },
   "DependsOn": [
    "ScanOneObjectExecutionRoleDefaultPolicy",
    "ScanOneObjectExecutionRole"
   ]
  },
  "ScanStarterExecutionRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "states.",
           {
            "Ref": "AWS::Region"
           },
           ".amazonaws.com"
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "ScanStarterExecutionRoleDefaultPolicy": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "FilterFunction",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "ScanOneObjectFunction",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ScannerLoopStepFunction",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ScanStarterExecutionRoleDefaultPolicy",
    "Roles": [
     {
      "Ref": "ScanStarterExecutionRole"
     }
    ]
   }
  },
  "ScannerLoopStepFunction": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "RoleArn": {
     "Fn::GetAtt": [
      "ScanStarterExecutionRole",
      "Arn"
     ]
    },
    "DefinitionString": {
     "Fn::Join": [
      "",
      [
       "\n      {\n        \"Comment\": \"A machine that loops trough all files a bucket to scan them with File Storage Security.\",\n        \"StartAt\": \"Filter first 1000 keys to scan\",\n        \"States\": {\n          \"Filter first 1000 keys to scan\": {\n            \"Type\": \"Task\",\n            \"Resource\": \"arn:aws:states:::lambda:invoke\",\n            \"OutputPath\": \"$.Payload\",\n            \"Parameters\": {\n              \"Payload.$\": \"$\",\n              \"FunctionName\": \"",
       {
        "Fn::GetAtt": [
         "FilterFunction",
         "Arn"
        ]
       },
       "\"\n            },\n            \"Retry\": [\n              {\n                \"ErrorEquals\": [\n                  \"Lambda.ServiceException\",\n                  \"Lambda.AWSLambdaException\",\n                  \"Lambda.SdkClientException\"\n                ],\n                \"IntervalSeconds\": 2,\n                \"MaxAttempts\": 6,\n                \"BackoffRate\": 2\n              }\n            ],\n            \"Next\": \"Parallel\"\n          },\n          \"Parallel\": {\n            \"Type\": \"Parallel\",\n            \"Branches\": [\n              {\n                \"StartAt\": \"Map\",\n                \"States\": {\n                  \"Map\": {\n                    \"Type\": \"Map\",\n                    \"End\": true,\n                    \"Parameters\": {\n                      \"key.$\": \"$$.Map.Item.Value\",\n                      \"bucket.$\": \"$.bucket\"\n                    },\n                    \"Iterator\": {\n                      \"StartAt\": \"Scan a Object\",\n                      \"States\": {\n                        \"Scan a Object\": {\n                          \"Type\": \"Task\",\n                          \"Resource\": \"arn:aws:states:::lambda:invoke\",\n                          \"OutputPath\": \"$.Payload\",\n                          \"Parameters\": {\n                            \"Payload.$\": \"$\",\n                            \"FunctionName\": \"",
       {
        "Fn::GetAtt": [
         "ScanOneObjectFunction",
         "Arn"
        ]
       },
       "\"\n                          },\n                          \"Retry\": [\n                            {\n                              \"ErrorEquals\": [\n                                \"Lambda.ServiceException\",\n                                \"Lambda.AWSLambdaException\",\n                                \"Lambda.SdkClientException\"\n                              ],\n                              \"IntervalSeconds\": 2,\n                              \"MaxAttempts\": 6,\n                              \"BackoffRate\": 2\n                            }\n                          ],\n                          \"End\": true\n                        }\n                      }\n                    },\n                    \"ItemsPath\": \"$.keys\"\n                  }\n                }\n              },\n              {\n                \"StartAt\": \"Are there keys left?\",\n                \"States\": {\n                  \"Are there keys left?\": {\n                    \"Type\": \"Choice\",\n                    \"Choices\": [\n                      {\n                        \"Variable\": \"$.remainingKeysLength\",\n                        \"NumericGreaterThan\": 0,\n                        \"Comment\": \"Yes\",\n                        \"Next\": \"Re-execute with the remaining keys.\"\n                      }\n                    ],\n                    \"Default\": \"Pass\"\n                  },\n                  \"Re-execute with the remaining keys.\": {\n                    \"Type\": \"Task\",\n                    \"Resource\": \"arn:aws:states:::states:startExecution\",\n                    \"Parameters\": {\n                      \"StateMachineArn\": \"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":stateMachine:ScannerLoopStateMachine\",\n                      \"Input\": {\n                        \"stateBucket.$\": \"$.stateBucket\",\n                        \"stateKey.$\": \"$.stateKey\",\n                        \"limit.$\": \"$.limit\",\n                        \"bucket.$\": \"$.bucket\",\n                        \"AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$\": \"$$.Execution.Id\"\n                      }\n                    },\n                    \"End\": true\n                  },\n                  \"Pass\": {\n                    \"Type\": \"Pass\",\n                    \"End\": true,\n                    \"Result\": {}\n                  }\n                }\n              }\n            ],\n            \"End\": true\n          }\n        }\n      }\n      "
      ]
     ]
    },
    "StateMachineName": "ScannerLoopStateMachine"
   }
  },
  "FullScanStarterExecutionRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "states.",
           {
            "Ref": "AWS::Region"
           },
           ".amazonaws.com"
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "FullScanStarterExecutionRoleDefaultPolicy": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "PaginatorFunction",
         "Arn"
        ]
       }
      },
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ScannerLoopStepFunction",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "FullScanStarterExecutionRoleDefaultPolicy",
    "Roles": [
     {
      "Ref": "FullScanStarterExecutionRole"
     }
    ]
   }
  },
  "FullScanStarterLoopStepFunction": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "RoleArn": {
     "Fn::GetAtt": [
      "FullScanStarterExecutionRole",
      "Arn"
     ]
    },
    "DefinitionString": {
     "Fn::Join": [
      "",
      [
       "\n      {\n        \"Comment\": \"Kicks of a Full Scan using File Storage Security.\",\n        \"StartAt\": \"List all keys in bucket\",\n        \"States\": {\n          \"List all keys in bucket\": {\n            \"Type\": \"Task\",\n            \"Resource\": \"arn:aws:states:::lambda:invoke\",\n            \"OutputPath\": \"$.Payload\",\n            \"Parameters\": {\n              \"FunctionName\": \"",
       {
        "Fn::GetAtt": [
         "PaginatorFunction",
         "Arn"
        ]
       },
       "\",\n              \"Payload\": {\n                \"bucket\": \"",
       {
        "Ref": "BucketName"
       },
       "\"\n              }\n            },\n            \"Retry\": [\n              {\n                \"ErrorEquals\": [\n                  \"Lambda.ServiceException\",\n                  \"Lambda.AWSLambdaException\",\n                  \"Lambda.SdkClientException\"\n                ],\n                \"IntervalSeconds\": 2,\n                \"MaxAttempts\": 6,\n                \"BackoffRate\": 2\n              }\n            ],\n            \"Next\": \"Start Scanner Flow\"\n          },\n          \"Start Scanner Flow\": {\n            \"Type\": \"Task\",\n            \"Resource\": \"arn:aws:states:::states:startExecution\",\n            \"Parameters\": {\n              \"StateMachineArn\": \"",
       {
        "Fn::GetAtt": [
         "ScannerLoopStepFunction",
         "Arn"
        ]
       },
       "\",\n              \"Input\": {\n                \"stateKey.$\": \"$.stateKey\",\n                \"bucket.$\": \"$.bucket\",\n                \"stateBucket.$\": \"$.stateBucket\",\n                \"limit.$\": \"$.limit\",\n                \"AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$\": \"$$.Execution.Id\"\n              }\n            },\n            \"End\": true\n          }\n        }\n      }\n      "
      ]
     ]
    },
    "StateMachineName": "fullScanStarterStateMachine"
   },
   "DependsOn": [
    "FullScanStarterExecutionRoleDefaultPolicy",
    "FullScanStarterExecutionRole"
   ]
  },
  "FullScanStarterLoopStepFunctionEventsRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "events.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "FullScanStarterLoopStepFunctionEventsRoleDefaultPolicy": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": {
        "Ref": "FullScanStarterLoopStepFunction"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "FullScanStarterLoopStepFunctionEventsRoleDefaultPolicy",
    "Roles": [
     {
      "Ref": "FullScanStarterLoopStepFunctionEventsRole"
     }
    ]
   }
  },
  "ScanOnSchedule": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "ScheduleExpression": {
     "Ref": "Schedule"
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Ref": "FullScanStarterLoopStepFunction"
      },
      "Id": "Target0",
      "RoleArn": {
       "Fn::GetAtt": [
        "FullScanStarterLoopStepFunctionEventsRole",
        "Arn"
       ]
      }
     }
    ]
   },
   "Condition": "SetSchedule"
  }
 },
 "Outputs": {
  "FullScanFunctionPage": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "AWS::Region"
      },
      ".console.aws.amazon.com/states/home?region=",
      {
       "Ref": "AWS::Region"
      },
      "#/statemachines/view/arn:",
      {
       "Ref": "AWS::Partition"
      },
      ":states:",
      {
       "Ref": "AWS::Region"
      },
      ":",
      {
       "Ref": "AWS::AccountId"
      },
      ":stateMachine:fullScanStarterStateMachine"
     ]
    ]
   }
  }
 }
}
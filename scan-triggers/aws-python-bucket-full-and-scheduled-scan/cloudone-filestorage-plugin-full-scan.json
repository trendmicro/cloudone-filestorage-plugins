{
  "Metadata": {
    "AWS::ServerlessRepo::Application": {
       "Name": "cloudone-filestorage-plugin-trigger-full-scheduled-scan",
       "Description": "It deploys all the required resources to trigger a full scan, scheduled or not, on a S3 bucket leveraging an existing Trend Micro File Storage Security deployment.",
       "Author": "Trend Micro Cloud One File Storage Security",
       "SpdxLicenseId": "Apache-2.0",
       "LicenseUrl": "../../LICENSE",
       "ReadmeUrl": "README.md",
       "Labels": [
          "trendmicro",
          "cloudone",
          "filestorage",
          "s3",
          "bucket",
          "plugin",
          "full",
          "full-scan",
          "scheduled",
          "scheduled-scan"
       ],
       "HomePageUrl": "https://github.com/trendmicro/cloudone-filestorage-plugins",
       "SemanticVersion": "1.0.0",
       "SourceCodeUrl": "https://github.com/trendmicro/cloudone-filestorage-plugins/tree/master/scan-triggers/aws-python-bucket-full-and-scheduled-scan"
    }
  },
  "Transform": "AWS::Serverless-2016-10-31",
  "Parameters": {
    "BucketName": {
      "Type": "String",
      "Description": "Name of a bucket that you want to full scan. Make sure you have FSS Storage Stack deployed around it already."
    },
    "ScannerQueueArn": {
      "Type": "String",
      "Description": "ARN of the ScannerQueue queue. Something like arn:aws:sqs:us-east-1:123456789012:All-in-one-TM-FileStorageSecurity-ScannerStack-IT1V5O-ScannerQueue-1IOQHTGGGZYFL"
    },
    "ScannerQueueUrl": {
      "Type": "String",
      "Description": "URL of the ScannerQueue queue. Something like https://sqs.us-east-1.amazonaws.com/123456789012/All-in-one-TM-FileStorageSecurity-ScannerStack-IT1V5O-ScannerQueue-1IOQHTGGGZYFL"
    },
    "ScanResultTopicArn": {
      "Type": "String",
      "Description": "ARN of ScanResultTopic topic. Something like arn:aws:sns:us-east-1:123456789012:All-in-one-TM-FileStorageSecurity-StorageStack-1E00QCLBZW7M4-ScanResultTopic-1W7RZ7PBZZUJO"
    },
    "Schedule": {
      "Type": "String",
      "Default": "",
      "Description": "Set a schedule for full scan. If empty, there will not be a scheduled scan. Defaults to empty. More info at: https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchevents-expressions.html"
    }
  },
  "Conditions": {
    "SetSchedule": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "",
            {
              "Ref": "Schedule"
            }
          ]
        }
      ]
    }
  },
  "Resources": {
    "ExecutionRole605A040B": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "ExecutionRoleDefaultPolicyA5B92313": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:ListBucket",
                "s3:ListObjectsV2"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":s3:::",
                    {
                      "Ref": "BucketName"
                    }
                  ]
                ]
              }
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:PutObjectTagging"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":s3:::",
                    {
                      "Ref": "BucketName"
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Action": "sqs:SendMessage",
              "Effect": "Allow",
              "Resource": {
                "Ref": "ScannerQueueArn"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ExecutionRoleDefaultPolicyA5B92313",
        "Roles": [
          {
            "Ref": "ExecutionRole605A040B"
          }
        ]
      }
    },
    "BucketFullScan5CC6D1C6": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\nimport boto3\nfrom botocore.config import Config\nfrom botocore.exceptions import ClientError\nimport uuid\nimport os\nimport logging\nlogger = logging.getLogger()\n\nbucket=os.environ['BucketToScanName']\nsqs_url = os.environ['SQSUrl']\nsqs_region = sqs_url.split('.')[1]\nsqs_endpoint_url = 'https://sqs.{0}.amazonaws.com'.format(sqs_region)\nlogger.info('## ENVIRONMENT VARIABLES')\nlogger.info('Bucket to be fully scanned: ' + bucket)\nlogger.info('Scanner queue URL: ' + sqs_url)\nlogger.info('Scanner queue region: ' + sqs_region)\nlogger.info('Scanner queue endpoint URL: ' + sqs_endpoint_url)\nlogger.info('SNS Arn: ' + os.environ['SNSArn'])\n\n  \ndef get_matching_s3_objects(bucket, prefix=\"\", suffix=\"\"):\n  s3 = boto3.client(\"s3\")\n  paginator = s3.get_paginator(\"list_objects_v2\")\n    \n  kwargs = {'Bucket': bucket}\n    \n  # We can pass the prefix directly to the S3 API. If the user has passed\n  # a tuple or list of prefixes, we go through them one by one.\n  if isinstance(prefix, str):\n    prefixes = (prefix,)\n  else:\n    prefixes = prefix\n    \n  for key_prefix in prefixes:\n    kwargs[\"Prefix\"] = key_prefix\n    \n  for page in paginator.paginate(**kwargs):\n    try:\n      contents = page[\"Contents\"]\n    except KeyError:\n      break\n    \n    for obj in contents:\n      key = obj[\"Key\"]\n      if key.endswith(suffix):\n        yield obj\n  \n  \n  \ndef create_presigned_url(bucket_name, object_name, expiration):\n  \"\"\"Generate a presigned URL to share an S3 object\n    \n  :param bucket_name: string\n  :param object_name: string\n  :param expiration: Time in seconds for the presigned URL to remain valid\n  :return: Presigned URL as string. If error, returns None.\n  \"\"\"\n    \n  # Generate a presigned URL for the S3 object\n  s3_client = boto3.client('s3', config=Config(s3={'addressing_style': 'virtual'}, signature_version='s3v4'))\n  try:\n    response = s3_client.generate_presigned_url(\n      'get_object',\n      Params={\n      'Bucket': bucket_name,\n      'Key': object_name\n    },\n    ExpiresIn=expiration\n    )\n  except ClientError as e:\n    print('failed to generate pre-signed URL: ' + str(e))\n    return None\n    \n  # The response contains the presigned URL which is sensitive data\n  return response\n  \n\ndef push_to_sqs(bucket_name, object_name, presigned_url, event_time):\n  object = {\n    'S3': {\n    'bucket': \"{0}\".format(bucket_name),\n    'object': \"{0}\".format(object_name)\n  },\n    'ScanID': str(uuid.uuid4()),\n    'SNS' : os.environ['SNSArn'],\n    'URL': \"{0}\".format(presigned_url),\n    'ModTime': event_time\n  }\n  try:\n    session = boto3.session.Session(region_name=sqs_region)\n    sqs = session.resource(service_name='sqs', endpoint_url=sqs_endpoint_url)\n    queue = sqs.Queue(url=sqs_url)\n    response = queue.send_message(MessageBody=json.dumps(object))\n    return response\n  except ClientError as e:\n    print('failed to push SQS message: ' + str(e))\n    return None\n  \ndef handler(event, context):  \n  for object in get_matching_s3_objects(bucket=os.environ['BucketToScanName']):\n    if object['Size'] == 0:\n      continue\n    presigned = create_presigned_url(bucket_name=bucket, object_name=object[\"Key\"], expiration=3600)\n    sqs_response = push_to_sqs(bucket, object[\"Key\"], presigned, object['LastModified'].isoformat())\n    print(sqs_response)\n  return {\n    'statusCode': 200,\n    'body': json.dumps('Manual Scan was successfully triggered.')\n  }\n      "
        },
        "Role": {
          "Fn::GetAtt": [
            "ExecutionRole605A040B",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "SNSArn": {
              "Ref": "ScanResultTopicArn"
            },
            "SQSUrl": {
              "Ref": "ScannerQueueUrl"
            },
            "BucketToScanName": {
              "Ref": "BucketName"
            }
          }
        },
        "Handler": "index.handler",
        "Runtime": "python3.8",
        "Timeout": 600
      },
      "DependsOn": [
        "ExecutionRoleDefaultPolicyA5B92313",
        "ExecutionRole605A040B"
      ]
    },
    "ScanOnSchedule379705E3": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Ref": "Schedule"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "BucketFullScan5CC6D1C6",
                "Arn"
              ]
            },
            "Id": "Target0"
          }
        ]
      },
      "Condition": "SetSchedule"
    },
    "ScanOnScheduleAllowEventRuleFssFullScanStackBucketFullScanCF56F21C65E84B2D": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "BucketFullScan5CC6D1C6",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ScanOnSchedule379705E3",
            "Arn"
          ]
        }
      },
      "Condition": "SetSchedule"
    }
  },
  "Outputs": {
    "fullscannerlambdapage": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region"
            },
            ".console.aws.amazon.com/lambda/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#/functions/",
            {
              "Ref": "BucketFullScan5CC6D1C6"
            },
            "?tab=code"
          ]
        ]
      }
    }
  }
}

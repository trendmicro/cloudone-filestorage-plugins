AWSTemplateFormatVersion: 2010-09-09
Description: "FSS Bucket Lifecycle Automation Stack. Deploy FSS Storage to each new S3 bucket. When the S3 Bucket is deleted, the FSS stack is removed, if monitored."
Metadata:
  License: MIT-License
  Version: 1.2
Resources:
  c1api:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: C1 API KEY
      SecretString: !Sub '{"c1apikey":"${C1API}"}'
  storagelambdarole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: !Join ["-",[!Ref AWS::StackName, !Ref AWS::Region,"storage"]]
  storagelambdarolepolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Ref storagelambdarole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "logs:DescribeLogGroups"
              - "logs:PutRetentionPolicy" 
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "iam:GetRole"
              - "iam:AttachRolePolicy"
              - "iam:CreateRole"
              - "iam:PutRolePolicy"
              - "iam:DetachRolePolicy"
              - "iam:DeleteRole"
              - "iam:PassRole"
              - "iam:DeleteRolePolicy"
              - "iam:GetRolePolicy"  
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "s3:PutBucketTagging"
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:GetBucketTagging"
              - "s3:ListBucket"
              - "s3:GetEncryptionConfiguration"
              - "s3:PutEncryptionConfiguration"
              - "s3:GetObjectTagging"
              - "s3:ListAllMyBuckets"
              - "s3:CreateBucket"
              - "s3:PutObjectTagging"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "cloudformation:DescribeStacks"
              - "cloudformation:GetTemplate"
              - "cloudformation:GetTemplateSummary"
              - "cloudformation:CreateStack"
              - "cloudformation:ListStacks"
              - "cloudformation:DescribeStackInstance"
              - "cloudformation:ListStackResources"
              - "cloudformation:DescribeStackEvents"
              - "cloudformation:DescribeStackResource"
              - "cloudformation:ListExports"
              - "cloudformation:ListStackInstances"  
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "lambda:GetLayerVersion"
              - "lambda:PublishLayerVersion"
              - "lambda:CreateFunction"
              - "lambda:GetFunctionConfiguration"
              - "lambda:DeleteFunction"
              - "lambda:InvokeFunction"
              - "lambda:GetEventSourceMapping"
              - "lambda:CreateEventSourceMapping"
              - "lambda:GetFunction"
              - "lambda:AddPermission"  
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "sqs:AddPermission"
              - "sqs:GetQueueUrl"
              - "sqs:DeleteMessage"
              - "sqs:ReceiveMessage"
              - "sqs:ListQueueTags"
              - "sqs:SetQueueAttributes"
              - "sqs:ListQueues"
              - "sqs:GetQueueAttributes"
              - "sqs:CreateQueue"
              - "sqs:ListDeadLetterSourceQueues"
              - "sqs:SendMessage"  
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "sns:CreateTopic"
              - "sns:Publish"
              - "sns:SetTopicAttributes"
              - "sns:Subscribe"
              - "sns:GetTopicAttributes"  
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"  
            Resource: !GetAtt
              - storagelambda
              - Arn
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"     
            Resource: !Ref c1api
      Roles:
        - !Ref storagelambdarole
  storagelambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Timeout: 500
      Handler: index.lambda_handler
      Role: !GetAtt
        - storagelambdarole
        - Arn
      Code:
        ZipFile: |
          import json
          import os
          import time
          import boto3
          import urllib3
          from botocore.exceptions import ClientError
          http = urllib3.PoolManager()

          fss_key = os.environ["C1_API"]
          queue_name = os.environ["SCANNER_SQS_NAME"]
          c1_region = os.environ["C1_REGION"]
          stack_name = os.environ["SCANNER_STACK_NAME"]
          stacks_api_url = "https://filestorage."+c1_region+".cloudone.trendmicro.com/api/"

          def lambda_handler(event, context):
              # get secret
              secrets = boto3.client('secretsmanager').get_secret_value(SecretId=fss_key)
              sm_data = json.loads(secrets["SecretString"])
              new_api_format = sm_data["c1apikey"]
              cloud_one_api_key = "ApiKey "+new_api_format
              
              # gather bucket name from event
              bucket_name = event["detail"]["requestParameters"]["bucketName"]
              # filter event to bucket name
              substring = "copyzipsdestbucket"
              print("S3 Bucket: " + bucket_name)
              if substring in bucket_name:
                  print("Name matched filter:" + bucket_name)
                  return 0
              else:
                  # gather cloud one ext id
                  r = http.request(
                      "GET",
                      stacks_api_url+"external-id",
                      headers={
                          "Authorization": cloud_one_api_key,
                          "Api-Version": "v1",
                      },
                  )
                  ext_id = json.loads(r.data.decode("utf-8"))['externalID']
                  print("CloudOne ExtID: " + ext_id)
                  # gather aws account ID
                  account_id = event["account"]
                  print("AWS account ID: " + account_id)
                  
                  #gather scanner stack id
                  id_call = http.request('GET', stacks_api_url+"stacks", headers = {'Authorization': cloud_one_api_key, 'Api-Version': 'v1'})
                  try:
                    id_resp = json.loads(id_call.data.decode('utf-8'))['stacks']
                  except json.decoder.JSONDecodeError:
                    time.sleep(1)
                    id_resp = json.loads(id_call.data.decode('utf-8'))['stacks']
                  for data in id_resp:
                      if 'name' in data and data['name'] is not None:
                          if stack_name == data['name']:
                              stack_id = data['stackID']
                              print(stack_id)

                  s3_client = boto3.client("s3")
                  # check if encryption exists on bucket
                  try:
                      response = s3_client.get_bucket_encryption(Bucket=bucket_name)
                      try:
                          # kms check
                          kms_arn = response["ServerSideEncryptionConfiguration"]["Rules"][0]["ApplyServerSideEncryptionByDefault"]["KMSMasterKeyID"]
                          print("Key Arn: " + kms_arn)
                      except KeyError:
                          # sse-s3 check
                          sse_s3_bucket = response["ServerSideEncryptionConfiguration"]["Rules"][0]["ApplyServerSideEncryptionByDefault"]['SSEAlgorithm']
                          print("AWS SSE-S3: "+ sse_s3_bucket)
                          kms_arn = ""
                  except ClientError:
                      # not encrypted
                      print("S3: " + bucket_name + " has no encryption enabled")
                      kms_arn = ""
                  # check bucket tags
                  try:
                      response = s3_client.get_bucket_tagging(Bucket=bucket_name)
                      tags = response["TagSet"]
                      tag_status = tags
                  except ClientError:
                      no_tags = "does not have tags"
                      tag_status = no_tags
                  if tag_status == "does not have tags":
                      add_tag(s3_client, bucket_name, tag_list=[])
                      add_storage(cloud_one_api_key, bucket_name, ext_id, account_id, stack_id, kms_arn)
                  else:
                      for tags in tag_status:
                          if tags["Key"] == "FSSMonitored":
                              if tags["Value"].lower() == "no":
                                  # if tag FSSMonitored is no; quit
                                  print(
                                      "S3: "
                                      + bucket_name
                                      + " has tag FSSMonitored == no; aborting"
                                  )
                                  return 0
                              elif tags["Value"].lower() != "yes":
                                  add_storage(cloud_one_api_key, bucket_name, ext_id, account_id, stack_id, kms_arn)
                                  break
                      add_tag(s3_client, bucket_name, tag_list=tag_status)
                      add_storage(cloud_one_api_key, bucket_name, ext_id, account_id, stack_id, kms_arn)
          def add_tag(s3_client, bucket_name, tag_list):
              tag_list.append({'Key':'FSSMonitored', 'Value': 'Yes'})
              print(f"Bucket: {bucket_name} lacks an FSSMonitored tag; adding")
              s3_client.put_bucket_tagging(
                  Bucket=bucket_name,
                  Tagging={"TagSet": tag_list},
              )
          def add_storage(cloud_one_api_key, bucket_name, ext_id, account_id, stack_id, kms_arn):
              # deploy storage stack
              CloudOneRegion = {"ParameterKey": "CloudOneRegion", "ParameterValue": c1_region}
              ExternalID = {"ParameterKey": "ExternalID", "ParameterValue": ext_id}
              S3BucketToScan = {"ParameterKey": "S3BucketToScan", "ParameterValue": bucket_name}
              Trigger_with_event = {
                  "ParameterKey": "TriggerWithObjectCreatedEvent",
                  "ParameterValue": "true",
              }
              scanner_queue_url = {"ParameterKey": "ScannerSQSURL", "ParameterValue": queue_name}
              scanner_aws_account = {
                  "ParameterKey": "ScannerAWSAccount",
                  "ParameterValue": account_id,
              }
              S3_Encryption = {"ParameterKey": "KMSKeyARNForBucketSSE", "ParameterValue": kms_arn}
              cft_client = boto3.client("cloudformation")
              print("Creating stack ..")
              cft_client.create_stack(
                  StackName="C1-FSS-Storage-" + bucket_name,
                  TemplateURL="https://file-storage-security.s3.amazonaws.com/latest/templates/FSS-Storage-Stack.template",
                  Parameters=[
                      ExternalID,
                      S3BucketToScan,
                      CloudOneRegion,
                      scanner_queue_url,
                      Trigger_with_event,
                      scanner_aws_account,
                      S3_Encryption,
                  ],
                  Capabilities=["CAPABILITY_IAM"],
              )
              cft_waiter = cft_client.get_waiter("stack_create_complete")
              cft_waiter.wait(StackName="C1-FSS-Storage-" + bucket_name)
              res = cft_client.describe_stacks(StackName="C1-FSS-Storage-" + bucket_name)
              storage_stack = res["Stacks"][0]["Outputs"][2]["OutputValue"]
              add_to_cloudone(cloud_one_api_key, stack_id, storage_stack)
          # register storage stack to cloud one
          def add_to_cloudone(cloud_one_api_key, stack_id, storage_stack):
              print("FSS StorageRole Arn: " + storage_stack)
              # add to c1
              payload = {
                  "type": "storage",
                  "scannerStack": stack_id,
                  "provider": "aws",
                  "details": {"managementRole": storage_stack},
              }
              encoded_msg = json.dumps(payload)
              resp = http.request(
                  "POST",
                  stacks_api_url+"stacks",
                  headers={
                      "Content-Type": "application/json",
                      "Authorization": cloud_one_api_key,
                      "Api-Version": "v1",
                  },
                  body=encoded_msg,
              )
              transform = json.loads(resp.data.decode("utf-8"))
              url = "https://filestorage."+c1_region+".cloudone.trendmicro.com/api/stacks/"+transform['stackID']
              try:
                check_status(cloud_one_api_key, url)
              except (json.decoder.JSONDecodeError, KeyError):
                time.sleep(1)
                check_status(cloud_one_api_key, url)
          #check storage stack status
          def check_status(cloud_one_api_key, url):
              #gather stack status
              st_call = http.request('GET', url , headers = {'Authorization': cloud_one_api_key, 'Api-Version': 'v1'})
              status = json.loads(st_call.data.decode('utf-8'))['status']
              print("Status: " + status)
              while status == 'creating':
                  st_call = http.request('GET', url , headers = {'Authorization': cloud_one_api_key, 'Api-Version': 'v1'})
                  status = json.loads(st_call.data.decode('utf-8'))['status']
              if status == 'ok':
                  print("Status: " + status)
                  print('Deployed Successfully')
              else:
                print('Deployment Failed')
      TracingConfig:
        Mode: Active
      MemorySize: 128
      Environment:
        Variables:
          C1_REGION: !Ref C1RegionEndpoint
          C1_API: !Ref c1api
          SCANNER_SQS_NAME: !Ref SQSURL
          SCANNER_STACK_NAME: !Ref StackName
  eventbridgeevent:
    Type: AWS::Events::Rule
    Properties:
      State: "ENABLED"
      EventPattern:
        source:
          - aws.s3
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CreateBucket
      Targets:
        - Arn: !GetAtt
            - storagelambda
            - Arn
          Id: latest
  invokestorage:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt storagelambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - eventbridgeevent
        - Arn
  removelambdarole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: !Join ["-",[!Ref AWS::StackName, !Ref AWS::Region,"removestorage"]]
  removelambdarolepolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Ref removelambdarole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "logs:DescribeLogGroups"
              - "logs:DeleteLogGroup"
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "logs:PutRetentionPolicy"  
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "iam:DeletePolicy"
              - "iam:PassRole"
              - "iam:DetachRolePolicy"
              - "iam:GetRole"
              - "iam:GetRolePolicy"
              - "iam:DeleteRole"
              - "iam:DeleteRolePolicy"  
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "cloudformation:ListExports"
              - "cloudformation:ListStackInstances"
              - "cloudformation:DescribeStackResource"
              - "cloudformation:ListStackResources"
              - "cloudformation:DescribeStackEvents"
              - "cloudformation:DescribeStackInstance"
              - "cloudformation:GetTemplateSummary"
              - "cloudformation:DescribeStacks"
              - "cloudformation:GetTemplate"
              - "cloudformation:DeleteStack"
              - "cloudformation:ListStacks"  
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "sqs:ListQueues"
              - "sqs:GetQueueUrl"
              - "sqs:ListQueueTags"
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:RemovePermission"
              - "sqs:GetQueueAttributes"
              - "sqs:ListDeadLetterSourceQueues"
              - "sqs:DeleteQueue"  
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "s3:*"
              - "sns:Unsubscribe"
              - "sns:SetTopicAttributes"
              - "sns:GetTopicAttributes"
              - "sns:RemovePermission"
              - "sns:DeleteTopic"  
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "lambda:DeleteFunction"
              - "lambda:InvokeFunction"
              - "lambda:GetEventSourceMapping"
              - "lambda:GetFunction"
              - "lambda:RemovePermission"  
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "secretsmanager:GetSecretValue"  
            Resource: !Ref c1api
          - Effect: Allow
            Action:
              - "sts:AssumeRole"

            Resource: !GetAtt
              - removestoragelambda
              - Arn
      Roles:
        - !Ref removelambdarole
  removestoragelambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Timeout: 120
      Handler: index.lambda_handler
      Role: !GetAtt
        - removelambdarole
        - Arn
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          import urllib3
          from botocore.exceptions import ClientError
          http = urllib3.PoolManager()

          fss_key = os.environ["C1_API"]
          c1_region = os.environ["C1_REGION"]
          ext_id_url = "https://filestorage."+c1_region+".cloudone.trendmicro.com/api/external-id"
          stacks_url = "https://filestorage."+c1_region+".cloudone.trendmicro.com/api/stacks"
          delete_url = "https://filestorage."+c1_region+".cloudone.trendmicro.com/api/stacks/"

          def lambda_handler(event, context):
              # get secret
              secrets = boto3.client('secretsmanager').get_secret_value(SecretId=fss_key)
              sm_data = json.loads(secrets["SecretString"])
              new_api_format = sm_data["c1apikey"]
              cloud_one_api_key = "ApiKey "+new_api_format

              #gather bucket name from event
              bucket_name = event['detail']['requestParameters']['bucketName']
              print("S3 Bucket: " + bucket_name)
                
              # gather cloud one ext id
              r = http.request(
                  "GET",
                  ext_id_url,
                  headers={
                      "Authorization": cloud_one_api_key,
                      "Api-Version": "v1",
                    },
                )
              ext = json.loads(r.data.decode("utf-8"))
              ext_id = ext["externalID"]
              print("CloudOne ExtID: " + ext_id)
                
              # gather aws account ID
              account_id = event["account"]
              print("AWS account ID: " + account_id)

              #gather stack id
              has_next_value = False
              next = ""
              #default limit is 25
              q_params = {
                  "provider": "aws",
                  "status": "ok",
                  "type": "storage"
                }  
              id_call = http.request('GET', stacks_url, q_params, headers = {'Authorization': cloud_one_api_key, 'Api-Version': 'v1'})
              try:
                  id_resp = json.loads(id_call.data.decode('utf-8'))
              except json.decoder.JSONDecodeError:
                  time.sleep(1)
                  id_resp = json.loads(id_call.data.decode('utf-8'))
              for data in id_resp['stacks']:
                  if 'storage' in data and data['storage'] is not None:
                      if bucket_name == data['storage']:
                          stack_name = data['name']
                          stack_id = data['stackID']
                          print(stack_name)
                          print(stack_id)
                          stack_removal(cloud_one_api_key, stack_id,stack_name)
              if "next" in id_resp:
                  has_next_value = True
                  next = id_resp['next']
              while has_next_value:
                  #next call
                  q_params = {
                      "provider": "aws",
                      "status": "ok",
                      "type": "storage",
                      "cursor": next
                    }
                  id_call = http.request('GET', stacks_url, q_params, headers = {'Authorization': cloud_one_api_key, 'Api-Version': 'v1'})
                  try:
                      id_resp = json.loads(id_call.data.decode('utf-8'))
                  except:
                      time.sleep(1)
                      id_resp = json.loads(id_call.data.decode('utf-8'))
                  for data in id_resp['stacks']:
                      if 'storage' in data and data['storage'] is not None:
                          if bucket_name == data['storage']:
                              stack_name = data['name']
                              stack_id = data['stackID']
                              print(stack_name)
                              print(stack_id)
                              stack_removal(cloud_one_api_key, stack_id, stack_name)
                              has_next_value = False
                  if "next" in id_resp:
                      next = id_resp['next']
                  else:
                      has_next_value = False

          def stack_removal(cloud_one_api_key, stack_id, stack_name):
              #delete cft stack
              cft_client = boto3.client("cloudformation")
              response = cft_client.delete_stack(StackName=stack_name)
              #delete stack from c1-fss
              id_call = http.request('DELETE', delete_url+stack_id, headers = {'Authorization': cloud_one_api_key, 'Api-Version': 'v1'})
      TracingConfig:
        Mode: Active
      MemorySize: 128
      Environment:
        Variables:
          C1_REGION: !Ref C1RegionEndpoint
          C1_API: !Ref c1api
  removeeventbridgeevent:
    Type: AWS::Events::Rule
    Properties:
      State: "ENABLED"
      EventPattern:
        source:
          - aws.s3
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - DeleteBucket
      Targets:
        - Arn: !GetAtt
            - removestoragelambda
            - Arn
          Id: latest
  invokeremove:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt removestoragelambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - removeeventbridgeevent
        - Arn
Parameters:
  C1RegionEndpoint:
    Type: String
    Description: Enter your Cloud One account region (e.g. us-1)
  C1API:
    Type: String
    NoEcho: true
    Description: Enter your Cloud One API Key
  SQSURL:
    Type: String
    Default: ""
    Description: Enter the Scanner Stack SQS URL
  StackName:
    Type: String
    Default: ""
    Description: Enter the Scanner Stack Name

{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "promoteOrQuarantineFunctionName": {
            "type": "string",
            "defaultValue": "[concat('pqfunction', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "The name of the promote or quarantine function to create."
            }
        },
        "functionsPackageLocation": {
            "type": "string",
            "defaultValue": "https://github.com/trendmicro/cloudone-filestorage-plugins/releases/download/azure-python-promote-or-quarantine-1.0.0",
            "metadata": {
                "description": "Warning: Do not modify the field. Modifications may cause your deployment to fail."
            }
        },
        "sharedAccessSignature": {
            "type": "secureString",
            "defaultValue": "",
            "metadata": {
                "description": "Warning: Do not modify the field. Modifications may cause your deployment to fail."
            }
        },
        "scanningStorageAccountResourceID": {
            "type": "String",
            "metadata": {
                "description": "The resource ID of the Storage Account scanned by Trend Micro Cloud One File Storage Security. The ID can be found in the Storage Account's <b>Endpoints</b> page.<br/>For example, <b>/subscriptions/1234abcd-3c6d-4347-9019-123456789012/resourceGroups/storage-resource-group/providers/Microsoft.Storage/storageAccounts/sourcestorageaccount</b>"
            }
        },
        "scanResultTopicResourceID": {
            "type": "String",
            "metadata": {
                "description": "The resource ID of the scan result topic Server Bus topic in storage stack."
            }
        },
        "promoteStorageAccountConnectionString": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "(Optional) The connection string of the Storage Account used to promote files without malicious intent. Leave the connection string blank to disable promoting."
            }
        },
        "promoteMode": {
            "type": "string",
            "defaultValue": "move",
            "allowedValues": [
                "move",
                "copy"
            ],
            "metadata": {
                "description": "The method by which files were promoted.<br/>(Options: move, copy)."
            }
        },
        "quarantineStorageAccountConnectionString": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "(Optional) The connection string of the Storage Account used to quarantine malicious files. Leave the connection string blank to disable quarantining."
            }
        },
        "quarantineMode": {
            "type": "string",
            "defaultValue": "move",
            "allowedValues": [
                "move",
                "copy"
            ],
            "metadata": {
                "description": "The method by which files were quarantined.<br/>(Options: move, copy)."
            }
        },
        "VNETResourceID": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "<b>[VNet Only]</b><br />This field requires the resource ID of the existing virtual network (VNet) that the deployed resource will be associated with. If you wish to deploy the plugin into a VNet, please see <a href='https://github.com/trendmicro/cloudone-filestorage-plugins/tree/master/post-scan-actions/azure-python-promote-or-quarantine#deploy-function-app-with-vnet-integration'>Deploy Function App with VNet Integration</a> for detailed instructions and ensure that the required resources have been created.<br /> If a VNet is not required, please leave this field blank."
            }
        },
        "VNETPromoteOrQuarantineSubnetName": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "<b>[VNet Only]</b><br />The name of the subnet used by the promote or quarantine function app."
            }
        },
        "VNETPrivateEndpointsSubnetName": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "<b>[VNet Only]</b><br />Provide the name of the subnet used to create private endpoints for other resources such as Service Bus and Storage Account."
            }
        },
        "VNETFilePrivateDNSZoneResourceID": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "<b>[VNet Only]</b><br />To connect to stack resources via private endpoints, use the Private DNS zone resource ID for the storage account file.<br/>For example:<br/><b>/subscriptions/1234abcd-3c6d-4347-9019-123456789012/resourceGroups/resource-group-name/providers/Microsoft.Network/privateDnsZones/privatelink.file.core.windows.net</b><br/>Please confirm the Private DNS zone name is correct and refer to <a href='https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns'>Azure Private Endpoint DNS configuration</a>.<br/> If a VNet is not required, please leave this field blank."
            }
        },
        "VNETBlobPrivateDNSZoneResourceID": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "<b>[VNet Only]</b><br />To connect to stack resources via private endpoints, use the Private DNS zone resource ID for the storage account blob.<br/>For example:<br/><b>/subscriptions/1234abcd-3c6d-4347-9019-123456789012/resourceGroups/resource-group-name/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net</b><br/>Please confirm the Private DNS zone name is correct and refer to <a href='https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns'>Azure Private Endpoint DNS configuration</a>.<br/> If a VNet is not required, please leave this field blank."
            }
        },
        "VNETRestrictedAccessForApplicationInsights": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "<b>[VNet Only]</b><br />Indicates whether to restrict public access to Application Insights. If set to true, it means that Application Insights can only be accessed through Azure Monitor Private Link Scope. If you don't add the Application Insight to the Azure Monitor Private Link Scope, you won't be able to ingest or query data. For more information on how to configure Private Link for Application Insights, please see <a href='https://cloudone.trendmicro.com/docs/file-storage-security/azure-vnet-deployment/'>Restrict access to Application Insights'</a>. If VNet is not required, please choose false."
            }
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "unifiedSAS": "[if(empty(parameters('sharedAccessSignature')), '', if(startsWith(parameters('sharedAccessSignature'), '?'), parameters('sharedAccessSignature'), concat('?', parameters('sharedAccessSignature'))))]",
        "functionPackageLink": "[concat(parameters('functionsPackageLocation') ,'/promoteOrQuarantineFunction.zip', variables('unifiedSAS'))]",
        "functionContentShareName": "function-content-share",
        "functionAppName": "[parameters('promoteOrQuarantineFunctionName')]",
        "hostingPlanName": "[parameters('promoteOrQuarantineFunctionName')]",
        "applicationInsightsName": "[parameters('promoteOrQuarantineFunctionName')]",
        "storageAccountName": "[concat('pqfunction', uniquestring(resourceGroup().id))]",
        "storageAccountFileNICName": "[concat('pqfunctionsani0', uniquestring(resourceGroup().id))]",
        "storageAccountBlobNICName": "[concat('pqfunctionsani1', uniquestring(resourceGroup().id))]",
        "storageAccountFilePEName": "[concat('pqfunctionsape0', uniquestring(resourceGroup().id))]",
        "storageAccountBlobPEName": "[concat('pqfunctionsape1', uniquestring(resourceGroup().id))]",
        "storageAccountFileShareName": "[format('{0}/default/{1}', variables('storageAccountName'), variables('functionContentShareName'))]",
        "scanningStorageAccountResourceIDSplits": "[split(parameters('scanningStorageAccountResourceID'), '/')]",
        "scanningStorageSubscriptionID": "[variables('scanningStorageAccountResourceIDSplits')[2]]",
        "scanningStorageResourceGroupName": "[variables('scanningStorageAccountResourceIDSplits')[4]]",
        "scanningStorageAccountName": "[variables('scanningStorageAccountResourceIDSplits')[8]]",
        "scanningStoragePromoteQuarantineRoleAssignmentUID": "[guid(resourceGroup().id, variables('scanningStorageAccountName'))]",
        "scanningStoragePromoteQuarantineRoleName": "[guid('FSS-ScanningStoragePromteQuarantineRole', parameters('promoteOrQuarantineFunctionName'))]",
        "scanningStoragePromoteQuarantineRoleDefinitionName": "[concat('FSS-ScanningStoragePromteQuarantineRole-', parameters('promoteOrQuarantineFunctionName'))]",
        "scanResultTopicResourceIDSplits": "[split(parameters('scanResultTopicResourceID'), '/')]",
        "scanResultTopicResourceSubscriptionID": "[variables('scanResultTopicResourceIDSplits')[2]]",
        "scanResultTopicResourceGroupName": "[variables('scanResultTopicResourceIDSplits')[4]]",
        "scanResultTopicNamespace": "[variables('scanResultTopicResourceIDSplits')[8]]",
        "scanResultTopicName": "[variables('scanResultTopicResourceIDSplits')[10]]",
        "scanResultTopicNamespaceResourceID": "[split(parameters('scanResultTopicResourceID'), '/topics/')[0]]",
        "scanResultSASKeyName": "RootManageSharedAccessKey",
        "scanResultAuthRuleResourceID": "[format('{0}/authorizationRules/{1}', variables('scanResultTopicNamespaceResourceID'), variables('scanResultSASKeyName'))]",
        "scanResultTopicSubscriptionName": "promote-or-quarantine-subscription",
        "scanResultTopicAPIVersion": "2017-04-01",
        "functionAppAPIVersion": "2020-12-01",
        "scanningStoragePromoteQuarantineRoleAssignmentDeployment": "scanningStoragePromoteQuarantineRoleAssignment",
        "scanResultSubscriptionDeployment": "scanResultSubscription",
        "withVNet": "[not(empty(parameters('VNETResourceID')))]",
        "privateEndpointSubnetID": "[concat(parameters('VNETResourceID'), '/subnets/', parameters('VNETPrivateEndpointsSubnetName'))]",
        "functionAppSKUMap": {
            "Y1": {
                "name": "Y1",
                "tier": "Dynamic",
                "size": "Y1",
                "family": "Y",
                "capacity": 1
            },
            "EP1": {
                "name": "EP1",
                "tier": "ElasticPremium",
                "size": "EP1",
                "family": "EP"
            }
        },
        "functionAppSKU": "[variables('functionAppSkuMap')[if(variables('withVNet'), 'EP1', 'Y1')]]",
        "storageAccountType": "[if(variables('withVNet'), 'StorageV2', 'Storage')]",
        "publicNetworkAccess": "[if(variables('withVNet'), 'Disabled', 'Enabled')]",
        "filePrivateZoneGroupName": "filePrivateDnsZoneGroup",
        "blobPrivateZoneGroupName": "blobPrivateDnsZoneGroup",
        "appInsightPublicAccess": "[if(parameters('VNETRestrictedAccessForApplicationInsights'), 'Disabled', 'Enabled')]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2022-09-01",
            "name": "[variables('storageAccountName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "[variables('storageAccountType')]",
            "properties": {
                "minimumTlsVersion": "TLS1_2",
                "publicNetworkAccess": "[variables('publicNetworkAccess')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2022-05-01",
            "name": "[variables('storageAccountFileShareName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "condition": "[variables('withVNet')]"
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2022-07-01",
            "name": "[variables('storageAccountFilePEName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('storageAccountFilePEName')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                            "groupIds": [
                                "file"
                            ]
                        }
                    }
                ],
                "customNetworkInterfaceName": "[variables('storageAccountFileNICName')]",
                "subnet": {
                    "id": "[variables('privateEndpointSubnetID')]"
                }
            },
            "condition": "[variables('withVNet')]"
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-07-01",
            "name": "[concat(variables('storageAccountFilePEName'), '/', variables('filePrivateZoneGroupName'))]",
            "dependsOn": [
                "[variables('storageAccountFilePEName')]"
            ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "[variables('filePrivateZoneGroupName')]",
                        "properties": {
                            "privateDnsZoneId": "[parameters('VNETFilePrivateDNSZoneResourceID')]"
                        }
                    }
                ]
            },
            "condition": "[and(not(empty(parameters('VNETFilePrivateDNSZoneResourceID'))), variables('withVNet'))]"
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2022-07-01",
            "name": "[variables('storageAccountBlobPEName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('storageAccountBlobPEName')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                            "groupIds": [
                                "blob"
                            ]
                        }
                    }
                ],
                "customNetworkInterfaceName": "[variables('storageAccountBlobNICName')]",
                "subnet": {
                    "id": "[variables('privateEndpointSubnetID')]"
                }
            },
            "condition": "[variables('withVNet')]"
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-07-01",
            "name": "[concat(variables('storageAccountBlobPEName'), '/', variables('blobPrivateZoneGroupName'))]",
            "dependsOn": [
                "[variables('storageAccountBlobPEName')]"
            ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "[variables('blobPrivateZoneGroupName')]",
                        "properties": {
                            "privateDnsZoneId": "[parameters('VNETBlobPrivateDNSZoneResourceID')]"
                        }
                    }
                ]
            },
            "condition": "[and(not(empty(parameters('VNETBlobPrivateDNSZoneResourceID'))), variables('withVNet'))]"
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2020-12-01",
            "name": "[variables('hostingPlanName')]",
            "location": "[variables('location')]",
            "kind": "linux",
            "sku": "[variables('functionAppSKU')]",
            "properties": {
                "reserved": true
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "[variables('functionAppAPIVersion')]",
            "name": "[variables('functionAppName')]",
            "location": "[variables('location')]",
            "kind": "functionapp",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(variables('storageAccountFileShareName'), '/')[0], split(variables('storageAccountFileShareName'), '/')[1], split(variables('storageAccountFileShareName'), '/')[2])]"
            ],
            "properties": {
                "enabled": true,
                "reserved": true,
                "isXenon": false,
                "hyperV": false,
                "publicNetworkAccess": "[variables('publicNetworkAccess')]",
                "virtualNetworkSubnetId": "[if(variables('withVNet'), concat(parameters('VNETResourceID'), '/subnets/', parameters('VNETPromoteOrQuarantineSubnetName')), json('null'))]",
                "vnetRouteAllEnabled": "[variables('withVNet')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "siteConfig": {
                    "use32BitWorkerProcess": false,
                    "linuxFxVersion": "PYTHON|3.8",
                    "appSettings": [
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[if(variables('withVNet'), variables('functionContentShareName'), toLower(variables('functionAppName')))]"
                        },
                        {
                            "name": "WEBSITE_RUN_FROM_PACKAGE",
                            "value": "[variables('functionPackageLink')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTOVERVNET",
                            "value": "[if(variables('withVNet'), '1', '0')]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~4"
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "~10"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('microsoft.insights/components', variables('applicationInsightsName')), '2020-02-02-preview').InstrumentationKey]"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "python"
                        },
                        {
                            "name": "SCAN_RESULT_TOPIC_SUBSCRIPTION",
                            "value": "[variables('scanResultTopicSubscriptionName')]"
                        },
                        {
                            "name": "BUS_TOPIC_CONNECTION_STRING",
                            "value": "[listkeys(variables('scanResultAuthRuleResourceID'), variables('scanResultTopicAPIVersion')).primaryConnectionString]"
                        },
                        {
                            "name": "QUARANTINEMODE",
                            "value": "[parameters('quarantineMode')]"
                        },
                        {
                            "name": "QUARANTINE_STORAGE_CONNECTION_STRING",
                            "value": "[parameters('quarantineStorageAccountConnectionString')]"
                        },
                        {
                            "name": "PROMOTEMODE",
                            "value": "[parameters('promoteMode')]"
                        },
                        {
                            "name": "PROMOTE_STORAGE_CONNECTION_STRING",
                            "value": "[parameters('promoteStorageAccountConnectionString')]"
                        }
                    ]
                },
                "hostNameSslStates": [
                    {
                        "name": "[concat(variables('functionAppName'), '.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Standard"
                    },
                    {
                        "name": "[concat(variables('functionAppName'), '.scm.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Repository"
                    }
                ]
            }
        },
        {
            "type": "microsoft.insights/components",
            "apiVersion": "2020-02-02",
            "name": "[variables('applicationInsightsName')]",
            "location": "[variables('location')]",
            "kind": "web",
            "tags": {
                "[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('applicationInsightsName')))]": "Resource"
            },
            "properties": {
                "Application_Type": "web",
                "publicNetworkAccessForIngestion": "[variables('appInsightPublicAccess')]",
                "publicNetworkAccessForQuery": "[variables('appInsightPublicAccess')]"
            }
        },
        {
            "apiVersion": "2019-05-01",
            "name": "[variables('scanResultSubscriptionDeployment')]",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[variables('scanResultTopicResourceGroupName')]",
            "subscriptionId": "[variables('scanResultTopicResourceSubscriptionID')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.ServiceBus/namespaces/topics/subscriptions",
                            "apiVersion": "[variables('scanResultTopicAPIVersion')]",
                            "name": "[format('{0}/{1}/{2}', variables('scanResultTopicNamespace'), variables('scanResultTopicName'), variables('scanResultTopicSubscriptionName'))]",
                            "properties": {
                                "defaultMessageTimeToLive": "PT1H",
                                "maxDeliveryCount": 3,
                                "lockDuration": "PT4M"
                            }
                        }
                    ],
                    "outputs": {
                        "scanResultTopicSubscriptionResourceID": {
                            "type": "string",
                            "value": "[resourceId('Microsoft.ServiceBus/namespaces/topics/subscriptions', variables('scanResultTopicNamespace'), variables('scanResultTopicName'), variables('scanResultTopicSubscriptionName'))]"
                        }
                    }
                },
                "parameters": {}
            }
        },
        {
            "apiVersion": "2019-05-01",
            "name": "[variables('scanningStoragePromoteQuarantineRoleAssignmentDeployment')]",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[variables('scanningStorageResourceGroupName')]",
            "subscriptionId": "[variables('scanningStorageSubscriptionID')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.Authorization/roleDefinitions",
                            "apiVersion": "2018-07-01",
                            "name": "[variables('scanningStoragePromoteQuarantineRoleName')]",
                            "properties": {
                                "roleName": "[variables('scanningStoragePromoteQuarantineRoleDefinitionName')]",
                                "description": "The role for FSS promote or quarantine plugin to read blobs, delete blobs, and generate SAS for blobs.",
                                "type": "customRole",
                                "isCustom": true,
                                "permissions": [
                                    {
                                        "actions": [
                                            "Microsoft.Storage/storageAccounts/blobServices/generateUserDelegationKey/action"
                                        ],
                                        "dataActions": [
                                            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/tags/read",
                                            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read",
                                            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/delete"
                                        ]
                                    }
                                ],
                                "assignableScopes": [
                                    "[parameters('scanningStorageAccountResourceID')]"
                                ]
                            }
                        },
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2018-09-01-preview",
                            "name": "[variables('scanningStoragePromoteQuarantineRoleAssignmentUID')]",
                            "scope": "[concat('Microsoft.Storage/storageAccounts/', variables('scanningStorageAccountName'))]",
                            "dependsOn": [
                                "[variables('scanningStoragePromoteQuarantineRoleName')]"
                            ],
                            "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('scanningStoragePromoteQuarantineRoleName'))]",
                                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), variables('functionAppAPIVersion'), 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                            }
                        }
                    ],
                    "outputs": {
                        "scanningStoragePromoteQuarantineRoleAssignmentResourceID": {
                            "type": "string",
                            "value": "[resourceId('Microsoft.Authorization/roleAssignments', variables('scanningStoragePromoteQuarantineRoleAssignmentUID'))]"
                        },
                        "scanningStoragePromoteQuarantineRoleResourceID": {
                            "type": "string",
                            "value": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('scanningStoragePromoteQuarantineRoleName'))]"
                        }
                    }
                },
                "parameters": {}
            }
        }
    ],
    "outputs": {
        "promoteOrQuarantineFunctionName": {
            "type": "string",
            "value": "[parameters('promoteOrQuarantineFunctionName')]"
        },
        "createdScanResultTopicSubscriptionResourceID": {
            "type": "string",
            "value": "[reference(variables('scanResultSubscriptionDeployment')).outputs.scanResultTopicSubscriptionResourceID.value]"
        },
        "createdScanningStoragePromoteQuarantineRoleAssignmentResourceID": {
            "type": "string",
            "value": "[reference(variables('scanningStoragePromoteQuarantineRoleAssignmentDeployment')).outputs.scanningStoragePromoteQuarantineRoleAssignmentResourceID.value]"
        },
        "createdScanningStoragePromoteQuarantineRoleResourceID": {
            "type": "string",
            "value": "[reference(variables('scanningStoragePromoteQuarantineRoleAssignmentDeployment')).outputs.scanningStoragePromoteQuarantineRoleResourceID.value]"
        },
        "applicationInsightResourceID": {
            "type": "string",
            "value": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
        }
    }
}
